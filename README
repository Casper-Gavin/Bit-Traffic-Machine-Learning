Multiclassification Project
Project by: Gavin Casper

This code is dependent on large .csv files to operate from.

In helpers.py, I only included three functions (no main) in the finished file because I would not ever run that file by itself after the testing phase. These functions are load_data, clean_data, and split_data. The load_data function is used once to take an external .csv file and convert it into a dataFrame for use in the program. The clean_data function replaces the infinity and NAN values (values that can't be used in computations) in the inputted dataFrame and replaced them with 0s. It then gets rid of all non-numeric data in the dataFrame using the private function _get_numeric_data. The split_data function splits that dataFrame into 4 sets of data: X_train, y_train, X_test, and y_test. These are used to train the chosen model and then test the prediction accuracy of that model. It does this using a random mask value to split the data into 80% training and 20% testing.
In multiclass_classification.py, I have 5 functions: direct_multiclass_train, direct_multiclass_test, data_resampling, improved_data_split, and get_binary_dataset. I also have a main function in which I run all of these functions. The function direct_multiclass_train takes in the wanted model type and the X_train and y_train datasets (made by using split_data) and creates and returns the desired model after fitting it. If the model type that was inputted does not match the four model types allowed (Decision Tree, K-Nearest Neighbor, MLP, and Random Forest) then the function prints an error statement. The function direct_multiclass_test iterates through the predictions of the model and counts how many correct predictions there were. It then returns the decimal amount correct (100% correct = 1). The function data_resampling takes in a cleaned dataFrame and resamples it using the specified undersampling strategy specified in the function argument. It then splits that model into X_resampled and y_resampled and combines them back to form a resampled dataFrame which it returns. The improved_data_split function use a random mask less than 0.8 to split the data, not into four sets, but two sets of data that are the train and test dataFrames (which are returned). The get_binary_dataset function uses the improved_data_split function to split the data into training and testing data. It then converts those to a binary dataFrame using BENIGN and MALICIOUS labels. It then returns both the binary dataFrame and a resampled version of df_test (which is used in main). The main function implements all of the above functions to perform machine learning on a sample of network traffic samples to predict whether they are benign or malicious.
